// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: main.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UsersServiceClient is the client API for UsersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersServiceClient interface {
	// Admin
	GetAdminUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (UsersService_GetAdminUsersClient, error)
	CreateUser(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Id, error)
	Auth(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AuthResponse, error)
	CreateStripeCheckout(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StripeUrlResponse, error)
	CreateStripePortal(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StripeUrlResponse, error)
}

type usersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersServiceClient(cc grpc.ClientConnInterface) UsersServiceClient {
	return &usersServiceClient{cc}
}

func (c *usersServiceClient) GetAdminUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (UsersService_GetAdminUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &UsersService_ServiceDesc.Streams[0], "/proto.UsersService/GetAdminUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &usersServiceGetAdminUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UsersService_GetAdminUsersClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type usersServiceGetAdminUsersClient struct {
	grpc.ClientStream
}

func (x *usersServiceGetAdminUsersClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *usersServiceClient) CreateUser(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/proto.UsersService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) Auth(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/proto.UsersService/Auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CreateStripeCheckout(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StripeUrlResponse, error) {
	out := new(StripeUrlResponse)
	err := c.cc.Invoke(ctx, "/proto.UsersService/CreateStripeCheckout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CreateStripePortal(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StripeUrlResponse, error) {
	out := new(StripeUrlResponse)
	err := c.cc.Invoke(ctx, "/proto.UsersService/CreateStripePortal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServiceServer is the server API for UsersService service.
// All implementations must embed UnimplementedUsersServiceServer
// for forward compatibility
type UsersServiceServer interface {
	// Admin
	GetAdminUsers(*Empty, UsersService_GetAdminUsersServer) error
	CreateUser(context.Context, *Empty) (*Id, error)
	Auth(context.Context, *Empty) (*AuthResponse, error)
	CreateStripeCheckout(context.Context, *Empty) (*StripeUrlResponse, error)
	CreateStripePortal(context.Context, *Empty) (*StripeUrlResponse, error)
	mustEmbedUnimplementedUsersServiceServer()
}

// UnimplementedUsersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUsersServiceServer struct {
}

func (UnimplementedUsersServiceServer) GetAdminUsers(*Empty, UsersService_GetAdminUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAdminUsers not implemented")
}
func (UnimplementedUsersServiceServer) CreateUser(context.Context, *Empty) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUsersServiceServer) Auth(context.Context, *Empty) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedUsersServiceServer) CreateStripeCheckout(context.Context, *Empty) (*StripeUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStripeCheckout not implemented")
}
func (UnimplementedUsersServiceServer) CreateStripePortal(context.Context, *Empty) (*StripeUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStripePortal not implemented")
}
func (UnimplementedUsersServiceServer) mustEmbedUnimplementedUsersServiceServer() {}

// UnsafeUsersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServiceServer will
// result in compilation errors.
type UnsafeUsersServiceServer interface {
	mustEmbedUnimplementedUsersServiceServer()
}

func RegisterUsersServiceServer(s grpc.ServiceRegistrar, srv UsersServiceServer) {
	s.RegisterService(&UsersService_ServiceDesc, srv)
}

func _UsersService_GetAdminUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UsersServiceServer).GetAdminUsers(m, &usersServiceGetAdminUsersServer{stream})
}

type UsersService_GetAdminUsersServer interface {
	Send(*User) error
	grpc.ServerStream
}

type usersServiceGetAdminUsersServer struct {
	grpc.ServerStream
}

func (x *usersServiceGetAdminUsersServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func _UsersService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UsersService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CreateUser(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UsersService/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).Auth(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CreateStripeCheckout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CreateStripeCheckout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UsersService/CreateStripeCheckout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CreateStripeCheckout(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CreateStripePortal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CreateStripePortal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UsersService/CreateStripePortal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CreateStripePortal(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// UsersService_ServiceDesc is the grpc.ServiceDesc for UsersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UsersService",
	HandlerType: (*UsersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UsersService_CreateUser_Handler,
		},
		{
			MethodName: "Auth",
			Handler:    _UsersService_Auth_Handler,
		},
		{
			MethodName: "CreateStripeCheckout",
			Handler:    _UsersService_CreateStripeCheckout_Handler,
		},
		{
			MethodName: "CreateStripePortal",
			Handler:    _UsersService_CreateStripePortal_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAdminUsers",
			Handler:       _UsersService_GetAdminUsers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "main.proto",
}

// EnergyServiceClient is the client API for EnergyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnergyServiceClient interface {
	// Admin
	GetAdminMeters(ctx context.Context, in *Empty, opts ...grpc.CallOption) (EnergyService_GetAdminMetersClient, error)
	ConnectMeterToUser(ctx context.Context, in *MeterUserRequest, opts ...grpc.CallOption) (*Meter, error)
	DisconnectMeterFromUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error)
	GetTariffs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (EnergyService_GetTariffsClient, error)
	GetTariffById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Tariff, error)
	CreateTariff(ctx context.Context, in *Tariff, opts ...grpc.CallOption) (*Tariff, error)
	DeleteTariffById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error)
	DuplicateTariff(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Tariff, error)
	CreateTariffSector(ctx context.Context, in *TariffSector, opts ...grpc.CallOption) (*TariffSector, error)
	DeleteTariffSectorById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error)
	CreateTariffPrice(ctx context.Context, in *TariffPrice, opts ...grpc.CallOption) (*TariffPrice, error)
	DeleteTariffPriceById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error)
	GetMeters(ctx context.Context, in *Empty, opts ...grpc.CallOption) (EnergyService_GetMetersClient, error)
	UpdateMeter(ctx context.Context, in *Meter, opts ...grpc.CallOption) (*Meter, error)
	GetMetersSummary(ctx context.Context, in *Empty, opts ...grpc.CallOption) (EnergyService_GetMetersSummaryClient, error)
	GetMeasurements(ctx context.Context, in *MeasurementsRequest, opts ...grpc.CallOption) (EnergyService_GetMeasurementsClient, error)
	GetCost(ctx context.Context, in *CostRequest, opts ...grpc.CallOption) (*CostResponse, error)
}

type energyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnergyServiceClient(cc grpc.ClientConnInterface) EnergyServiceClient {
	return &energyServiceClient{cc}
}

func (c *energyServiceClient) GetAdminMeters(ctx context.Context, in *Empty, opts ...grpc.CallOption) (EnergyService_GetAdminMetersClient, error) {
	stream, err := c.cc.NewStream(ctx, &EnergyService_ServiceDesc.Streams[0], "/proto.EnergyService/GetAdminMeters", opts...)
	if err != nil {
		return nil, err
	}
	x := &energyServiceGetAdminMetersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EnergyService_GetAdminMetersClient interface {
	Recv() (*Meter, error)
	grpc.ClientStream
}

type energyServiceGetAdminMetersClient struct {
	grpc.ClientStream
}

func (x *energyServiceGetAdminMetersClient) Recv() (*Meter, error) {
	m := new(Meter)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *energyServiceClient) ConnectMeterToUser(ctx context.Context, in *MeterUserRequest, opts ...grpc.CallOption) (*Meter, error) {
	out := new(Meter)
	err := c.cc.Invoke(ctx, "/proto.EnergyService/ConnectMeterToUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *energyServiceClient) DisconnectMeterFromUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/proto.EnergyService/DisconnectMeterFromUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *energyServiceClient) GetTariffs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (EnergyService_GetTariffsClient, error) {
	stream, err := c.cc.NewStream(ctx, &EnergyService_ServiceDesc.Streams[1], "/proto.EnergyService/GetTariffs", opts...)
	if err != nil {
		return nil, err
	}
	x := &energyServiceGetTariffsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EnergyService_GetTariffsClient interface {
	Recv() (*Tariff, error)
	grpc.ClientStream
}

type energyServiceGetTariffsClient struct {
	grpc.ClientStream
}

func (x *energyServiceGetTariffsClient) Recv() (*Tariff, error) {
	m := new(Tariff)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *energyServiceClient) GetTariffById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Tariff, error) {
	out := new(Tariff)
	err := c.cc.Invoke(ctx, "/proto.EnergyService/GetTariffById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *energyServiceClient) CreateTariff(ctx context.Context, in *Tariff, opts ...grpc.CallOption) (*Tariff, error) {
	out := new(Tariff)
	err := c.cc.Invoke(ctx, "/proto.EnergyService/CreateTariff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *energyServiceClient) DeleteTariffById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/proto.EnergyService/DeleteTariffById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *energyServiceClient) DuplicateTariff(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Tariff, error) {
	out := new(Tariff)
	err := c.cc.Invoke(ctx, "/proto.EnergyService/DuplicateTariff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *energyServiceClient) CreateTariffSector(ctx context.Context, in *TariffSector, opts ...grpc.CallOption) (*TariffSector, error) {
	out := new(TariffSector)
	err := c.cc.Invoke(ctx, "/proto.EnergyService/CreateTariffSector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *energyServiceClient) DeleteTariffSectorById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/proto.EnergyService/DeleteTariffSectorById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *energyServiceClient) CreateTariffPrice(ctx context.Context, in *TariffPrice, opts ...grpc.CallOption) (*TariffPrice, error) {
	out := new(TariffPrice)
	err := c.cc.Invoke(ctx, "/proto.EnergyService/CreateTariffPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *energyServiceClient) DeleteTariffPriceById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/proto.EnergyService/DeleteTariffPriceById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *energyServiceClient) GetMeters(ctx context.Context, in *Empty, opts ...grpc.CallOption) (EnergyService_GetMetersClient, error) {
	stream, err := c.cc.NewStream(ctx, &EnergyService_ServiceDesc.Streams[2], "/proto.EnergyService/GetMeters", opts...)
	if err != nil {
		return nil, err
	}
	x := &energyServiceGetMetersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EnergyService_GetMetersClient interface {
	Recv() (*Meter, error)
	grpc.ClientStream
}

type energyServiceGetMetersClient struct {
	grpc.ClientStream
}

func (x *energyServiceGetMetersClient) Recv() (*Meter, error) {
	m := new(Meter)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *energyServiceClient) UpdateMeter(ctx context.Context, in *Meter, opts ...grpc.CallOption) (*Meter, error) {
	out := new(Meter)
	err := c.cc.Invoke(ctx, "/proto.EnergyService/UpdateMeter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *energyServiceClient) GetMetersSummary(ctx context.Context, in *Empty, opts ...grpc.CallOption) (EnergyService_GetMetersSummaryClient, error) {
	stream, err := c.cc.NewStream(ctx, &EnergyService_ServiceDesc.Streams[3], "/proto.EnergyService/GetMetersSummary", opts...)
	if err != nil {
		return nil, err
	}
	x := &energyServiceGetMetersSummaryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EnergyService_GetMetersSummaryClient interface {
	Recv() (*MeterSummaryResponse, error)
	grpc.ClientStream
}

type energyServiceGetMetersSummaryClient struct {
	grpc.ClientStream
}

func (x *energyServiceGetMetersSummaryClient) Recv() (*MeterSummaryResponse, error) {
	m := new(MeterSummaryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *energyServiceClient) GetMeasurements(ctx context.Context, in *MeasurementsRequest, opts ...grpc.CallOption) (EnergyService_GetMeasurementsClient, error) {
	stream, err := c.cc.NewStream(ctx, &EnergyService_ServiceDesc.Streams[4], "/proto.EnergyService/GetMeasurements", opts...)
	if err != nil {
		return nil, err
	}
	x := &energyServiceGetMeasurementsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EnergyService_GetMeasurementsClient interface {
	Recv() (*MeasurementResponse, error)
	grpc.ClientStream
}

type energyServiceGetMeasurementsClient struct {
	grpc.ClientStream
}

func (x *energyServiceGetMeasurementsClient) Recv() (*MeasurementResponse, error) {
	m := new(MeasurementResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *energyServiceClient) GetCost(ctx context.Context, in *CostRequest, opts ...grpc.CallOption) (*CostResponse, error) {
	out := new(CostResponse)
	err := c.cc.Invoke(ctx, "/proto.EnergyService/GetCost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnergyServiceServer is the server API for EnergyService service.
// All implementations must embed UnimplementedEnergyServiceServer
// for forward compatibility
type EnergyServiceServer interface {
	// Admin
	GetAdminMeters(*Empty, EnergyService_GetAdminMetersServer) error
	ConnectMeterToUser(context.Context, *MeterUserRequest) (*Meter, error)
	DisconnectMeterFromUser(context.Context, *Id) (*Id, error)
	GetTariffs(*Empty, EnergyService_GetTariffsServer) error
	GetTariffById(context.Context, *Id) (*Tariff, error)
	CreateTariff(context.Context, *Tariff) (*Tariff, error)
	DeleteTariffById(context.Context, *Id) (*Id, error)
	DuplicateTariff(context.Context, *Id) (*Tariff, error)
	CreateTariffSector(context.Context, *TariffSector) (*TariffSector, error)
	DeleteTariffSectorById(context.Context, *Id) (*Id, error)
	CreateTariffPrice(context.Context, *TariffPrice) (*TariffPrice, error)
	DeleteTariffPriceById(context.Context, *Id) (*Id, error)
	GetMeters(*Empty, EnergyService_GetMetersServer) error
	UpdateMeter(context.Context, *Meter) (*Meter, error)
	GetMetersSummary(*Empty, EnergyService_GetMetersSummaryServer) error
	GetMeasurements(*MeasurementsRequest, EnergyService_GetMeasurementsServer) error
	GetCost(context.Context, *CostRequest) (*CostResponse, error)
	mustEmbedUnimplementedEnergyServiceServer()
}

// UnimplementedEnergyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEnergyServiceServer struct {
}

func (UnimplementedEnergyServiceServer) GetAdminMeters(*Empty, EnergyService_GetAdminMetersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAdminMeters not implemented")
}
func (UnimplementedEnergyServiceServer) ConnectMeterToUser(context.Context, *MeterUserRequest) (*Meter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectMeterToUser not implemented")
}
func (UnimplementedEnergyServiceServer) DisconnectMeterFromUser(context.Context, *Id) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectMeterFromUser not implemented")
}
func (UnimplementedEnergyServiceServer) GetTariffs(*Empty, EnergyService_GetTariffsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTariffs not implemented")
}
func (UnimplementedEnergyServiceServer) GetTariffById(context.Context, *Id) (*Tariff, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTariffById not implemented")
}
func (UnimplementedEnergyServiceServer) CreateTariff(context.Context, *Tariff) (*Tariff, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTariff not implemented")
}
func (UnimplementedEnergyServiceServer) DeleteTariffById(context.Context, *Id) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTariffById not implemented")
}
func (UnimplementedEnergyServiceServer) DuplicateTariff(context.Context, *Id) (*Tariff, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DuplicateTariff not implemented")
}
func (UnimplementedEnergyServiceServer) CreateTariffSector(context.Context, *TariffSector) (*TariffSector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTariffSector not implemented")
}
func (UnimplementedEnergyServiceServer) DeleteTariffSectorById(context.Context, *Id) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTariffSectorById not implemented")
}
func (UnimplementedEnergyServiceServer) CreateTariffPrice(context.Context, *TariffPrice) (*TariffPrice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTariffPrice not implemented")
}
func (UnimplementedEnergyServiceServer) DeleteTariffPriceById(context.Context, *Id) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTariffPriceById not implemented")
}
func (UnimplementedEnergyServiceServer) GetMeters(*Empty, EnergyService_GetMetersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMeters not implemented")
}
func (UnimplementedEnergyServiceServer) UpdateMeter(context.Context, *Meter) (*Meter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMeter not implemented")
}
func (UnimplementedEnergyServiceServer) GetMetersSummary(*Empty, EnergyService_GetMetersSummaryServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMetersSummary not implemented")
}
func (UnimplementedEnergyServiceServer) GetMeasurements(*MeasurementsRequest, EnergyService_GetMeasurementsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMeasurements not implemented")
}
func (UnimplementedEnergyServiceServer) GetCost(context.Context, *CostRequest) (*CostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCost not implemented")
}
func (UnimplementedEnergyServiceServer) mustEmbedUnimplementedEnergyServiceServer() {}

// UnsafeEnergyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnergyServiceServer will
// result in compilation errors.
type UnsafeEnergyServiceServer interface {
	mustEmbedUnimplementedEnergyServiceServer()
}

func RegisterEnergyServiceServer(s grpc.ServiceRegistrar, srv EnergyServiceServer) {
	s.RegisterService(&EnergyService_ServiceDesc, srv)
}

func _EnergyService_GetAdminMeters_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnergyServiceServer).GetAdminMeters(m, &energyServiceGetAdminMetersServer{stream})
}

type EnergyService_GetAdminMetersServer interface {
	Send(*Meter) error
	grpc.ServerStream
}

type energyServiceGetAdminMetersServer struct {
	grpc.ServerStream
}

func (x *energyServiceGetAdminMetersServer) Send(m *Meter) error {
	return x.ServerStream.SendMsg(m)
}

func _EnergyService_ConnectMeterToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnergyServiceServer).ConnectMeterToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EnergyService/ConnectMeterToUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnergyServiceServer).ConnectMeterToUser(ctx, req.(*MeterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnergyService_DisconnectMeterFromUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnergyServiceServer).DisconnectMeterFromUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EnergyService/DisconnectMeterFromUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnergyServiceServer).DisconnectMeterFromUser(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnergyService_GetTariffs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnergyServiceServer).GetTariffs(m, &energyServiceGetTariffsServer{stream})
}

type EnergyService_GetTariffsServer interface {
	Send(*Tariff) error
	grpc.ServerStream
}

type energyServiceGetTariffsServer struct {
	grpc.ServerStream
}

func (x *energyServiceGetTariffsServer) Send(m *Tariff) error {
	return x.ServerStream.SendMsg(m)
}

func _EnergyService_GetTariffById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnergyServiceServer).GetTariffById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EnergyService/GetTariffById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnergyServiceServer).GetTariffById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnergyService_CreateTariff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tariff)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnergyServiceServer).CreateTariff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EnergyService/CreateTariff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnergyServiceServer).CreateTariff(ctx, req.(*Tariff))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnergyService_DeleteTariffById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnergyServiceServer).DeleteTariffById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EnergyService/DeleteTariffById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnergyServiceServer).DeleteTariffById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnergyService_DuplicateTariff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnergyServiceServer).DuplicateTariff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EnergyService/DuplicateTariff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnergyServiceServer).DuplicateTariff(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnergyService_CreateTariffSector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TariffSector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnergyServiceServer).CreateTariffSector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EnergyService/CreateTariffSector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnergyServiceServer).CreateTariffSector(ctx, req.(*TariffSector))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnergyService_DeleteTariffSectorById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnergyServiceServer).DeleteTariffSectorById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EnergyService/DeleteTariffSectorById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnergyServiceServer).DeleteTariffSectorById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnergyService_CreateTariffPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TariffPrice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnergyServiceServer).CreateTariffPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EnergyService/CreateTariffPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnergyServiceServer).CreateTariffPrice(ctx, req.(*TariffPrice))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnergyService_DeleteTariffPriceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnergyServiceServer).DeleteTariffPriceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EnergyService/DeleteTariffPriceById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnergyServiceServer).DeleteTariffPriceById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnergyService_GetMeters_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnergyServiceServer).GetMeters(m, &energyServiceGetMetersServer{stream})
}

type EnergyService_GetMetersServer interface {
	Send(*Meter) error
	grpc.ServerStream
}

type energyServiceGetMetersServer struct {
	grpc.ServerStream
}

func (x *energyServiceGetMetersServer) Send(m *Meter) error {
	return x.ServerStream.SendMsg(m)
}

func _EnergyService_UpdateMeter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Meter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnergyServiceServer).UpdateMeter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EnergyService/UpdateMeter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnergyServiceServer).UpdateMeter(ctx, req.(*Meter))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnergyService_GetMetersSummary_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnergyServiceServer).GetMetersSummary(m, &energyServiceGetMetersSummaryServer{stream})
}

type EnergyService_GetMetersSummaryServer interface {
	Send(*MeterSummaryResponse) error
	grpc.ServerStream
}

type energyServiceGetMetersSummaryServer struct {
	grpc.ServerStream
}

func (x *energyServiceGetMetersSummaryServer) Send(m *MeterSummaryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EnergyService_GetMeasurements_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MeasurementsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnergyServiceServer).GetMeasurements(m, &energyServiceGetMeasurementsServer{stream})
}

type EnergyService_GetMeasurementsServer interface {
	Send(*MeasurementResponse) error
	grpc.ServerStream
}

type energyServiceGetMeasurementsServer struct {
	grpc.ServerStream
}

func (x *energyServiceGetMeasurementsServer) Send(m *MeasurementResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EnergyService_GetCost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnergyServiceServer).GetCost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EnergyService/GetCost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnergyServiceServer).GetCost(ctx, req.(*CostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnergyService_ServiceDesc is the grpc.ServiceDesc for EnergyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnergyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.EnergyService",
	HandlerType: (*EnergyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConnectMeterToUser",
			Handler:    _EnergyService_ConnectMeterToUser_Handler,
		},
		{
			MethodName: "DisconnectMeterFromUser",
			Handler:    _EnergyService_DisconnectMeterFromUser_Handler,
		},
		{
			MethodName: "GetTariffById",
			Handler:    _EnergyService_GetTariffById_Handler,
		},
		{
			MethodName: "CreateTariff",
			Handler:    _EnergyService_CreateTariff_Handler,
		},
		{
			MethodName: "DeleteTariffById",
			Handler:    _EnergyService_DeleteTariffById_Handler,
		},
		{
			MethodName: "DuplicateTariff",
			Handler:    _EnergyService_DuplicateTariff_Handler,
		},
		{
			MethodName: "CreateTariffSector",
			Handler:    _EnergyService_CreateTariffSector_Handler,
		},
		{
			MethodName: "DeleteTariffSectorById",
			Handler:    _EnergyService_DeleteTariffSectorById_Handler,
		},
		{
			MethodName: "CreateTariffPrice",
			Handler:    _EnergyService_CreateTariffPrice_Handler,
		},
		{
			MethodName: "DeleteTariffPriceById",
			Handler:    _EnergyService_DeleteTariffPriceById_Handler,
		},
		{
			MethodName: "UpdateMeter",
			Handler:    _EnergyService_UpdateMeter_Handler,
		},
		{
			MethodName: "GetCost",
			Handler:    _EnergyService_GetCost_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAdminMeters",
			Handler:       _EnergyService_GetAdminMeters_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTariffs",
			Handler:       _EnergyService_GetTariffs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetMeters",
			Handler:       _EnergyService_GetMeters_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetMetersSummary",
			Handler:       _EnergyService_GetMetersSummary_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetMeasurements",
			Handler:       _EnergyService_GetMeasurements_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "main.proto",
}
